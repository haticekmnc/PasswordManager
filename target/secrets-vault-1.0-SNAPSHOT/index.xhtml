<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      >
    <h:head>
        <title>Password Manager</title>
        <h:outputStylesheet name="css/index_style.css"/>
        <h:outputStylesheet name="css/add_password_style.css"/>
        <!-- <h:outputStylesheet library="primefaces-bootstrap" name="theme.css" /> -->
        <h:outputStylesheet name="primefaces.css" />


    </h:head>
    <h:body>
        <!-- Navbar -->
        <div class="navbar">
            <div>
                <a href="#" class="password-list">Password List</a>
            </div>
            <div>
                <a href="logPage.xhtml?faces-redirect=true" class="logout">Log Page</a>

            </div> 
            <h:form>
                <div>
                    <h:commandButton value="Logout" action="#{loginMB.logout}" class="logout" />
                </div>
            </h:form>
        </div>
        <!-- DataTable Container -->
        <h:form id="passwordForm" class="table-container">
            <!-- Add Password Button -->
            <div class="add-password-button-container">
                <p:button value="Add Password" outcome="addPassword.xhtml?faces-redirect=true" styleClass="add-password-button" icon="pi pi-plus"/>

            </div>
            <!-- Search and Filter Controls -->
            <div class="table-container">
                <p:dataTable id="dataTable" var="password" value="#{passwordBean.passwords}" styleClass="custom-datatable" widgetVar="passwordTableVar"
                             rows="10" paginator="true" paginatorPosition="bottom" paginatorTemplate="{CurrentPageReport} {FirstPageLink} {PreviousPageLink} 
                             {PageLinks} {NextpageLink} {LastPageLink} {RowsPerPageDropdown}"
                             currentPageReportTemplate="{startRecord}--{endRecord} of {totalRecords} records"
                             rowsPerPageTemplate="5,10,{ShowAll|'All'}">
                    <p:column headerText="System Information" filterBy="#{password.systemInformation}" filterMatchMode="contains">
                        <h:outputText value="#{password.systemInformation}" />
                    </p:column>
                    <p:column headerText="Access Information" filterBy="#{password.accessInformation}" filterMatchMode="contains">
                        <h:outputText value="#{password.accessInformation}"/>
                    </p:column>
                    <p:column headerText="Username" filterBy="#{password.username}" filterMatchMode="contains">
                        <h:outputText value="#{password.username}"/>
                    </p:column>
                    <p:column headerText="Password">
                        <h:outputText value="********" styleClass="password-hidden" rendered="#{!password.showPassword}" />
                        <h:outputText value="#{password.decryptedPassword}" styleClass="password-visible" rendered="#{password.showPassword}" />
                        <p:commandLink title="Toggle Show/Hide Password" 
                                       actionListener="#{passwordBean.toggleShowPassword(password, true)}"
                                       update="dataTable">
                            <i class="#{password.showPassword ? 'pi pi-eye ' : 'pi pi-eye-slash'}" />
                        </p:commandLink>
                    </p:column>

                    <p:column headerText="Notes" filterBy="#{password.notes}" filterMatchMode="contains" styleClass="notes-cell">
                        <h:outputText value="#{password.notes}"/>
                    </p:column>
                    <p:column headerText="Actions">
                        <p:commandButton value="Edit" icon="pi pi-pencil" styleClass="btn-edit"
                                         actionListener="#{passwordMB.prepareUpdate(password)}"
                                         update=":editDialogForm" oncomplete="PF('editDialog').show();" />
                        <p:commandButton value="Delete" icon="pi pi-trash" styleClass="btn-delete"

                                         onclick="PF('confirmation').show(); return false;"
                                         update="dataTable" />
                         <p:commandButton value="Log" icon="pi pi-info-circle" styleClass="btn-log"
                 actionListener="#{logMB.loadLogsForPassword(password.id)}"
                 update=":logDialogForm" oncomplete="PF('logDialog').show();" />


                         
                         
                        

                        <p:confirmDialog global="true" widgetVar="confirmation" header="Silme Onayı" message="Bu şifreyi silmek istediğinize emin misiniz?" severity="alert" styleClass="add-password-form">
                            <p:commandButton value="Evet" styleClass="ui-confirmdialog-yes" style="color:green;" icon="pi pi-check" actionListener="#{passwordMB.deletePassword(password)}" update="dataTable"/>
                            <p:commandButton value="Hayır" styleClass="ui-confirmdialog-no" style="color:red;" icon="pi pi-times" onclick="PF('confirmation').hide(); return false;"/>
                        </p:confirmDialog>
                    </p:column>

                </p:dataTable>

            </div>
        </h:form>
        
        
          <!-- Log Dialog -->
         <!-- Log Dialog -->
<p:dialog header="Log Details" widgetVar="logDialog" modal="true" resizable="false" 
          height="400" width="850" dynamic="true"> <!-- Dialog boyutları sabitlendi -->

    <!-- Geri Git Tuşu -->
    <div class="form-field back-button-container">
        <p:button value="&#8592; Back" outcome="index.xhtml" icon="pi pi-arrow-left" />
    </div>
    
    <p:dataTable id="logDialogForm" var="log" value="#{logMB.logEntries}" styleClass="log-table">
    <p:column headerText="Username">
        <h:outputText value="#{log.username}" />
    </p:column>
    <p:column headerText="Description">
        <h:outputText value="#{log.description}" />
    </p:column>
    <p:column headerText="Timestamp">
        <h:outputText value="#{log.timestamp}" />
    </p:column>
</p:dataTable>


</p:dialog>


               
        <!-- Edit Dialog -->
        <p:dialog  widgetVar="editDialog" 
                   modal="true" appendTo="@(body)" styleClass="ui-widget-overlay" resizable="false"
                   height="auto" width="auto"  >
            <h:form id="editDialogForm" styleClass="add-password-form">
                <div class="container">
                    <div class="add-password-form">
                        <h2>Edit Password</h2>

                        <div class="form-field-group">
                            <div class="form-field">
                                <label for="title">Sistem Bilgileri:</label>
                                <h:inputText id="title" value="#{passwordMB.selectedPassword.systemInformation}" required="true" requiredMessage="System Information is required." />
                                <h:message for="title" style="color: red" />

                            </div>
                            <div class="form-field">
                                <label for="url">Erişim Bilgileri:</label>
                                <h:inputText id="url" value="#{passwordMB.selectedPassword.accessInformation}" />
                            </div>
                        </div>

                        <div class="form-field-group">
                            <div class="form-field">
                                <label for="username">Username:</label>
                                <h:inputText id="username" value="#{passwordMB.selectedPassword.username}" required="true" />
                                <h:message for="username" style="color: red" />
                            </div>
                            <div class="form-field">
                                <label for="password">Password:</label>
                                <h:inputSecret id="password" value="#{passwordMB.selectedPassword.password}" required="true" />
                                <h:message for="password" style="color: red" />
                            </div>
                        </div>

                        <div class="form-field notes">
                            <label for="notes">Notes:</label>
                            <h:inputTextarea id="notes" value="#{passwordMB.selectedPassword.notes}" styleClass="auto-expand" />
                        </div>
                        <div class="form-field">
                            <p:commandButton value="Save" actionListener="#{passwordMB.updatePassword(passwordMB.selectedPassword)}" 
                                             update=":passwordForm:dataTable" oncomplete="PF('editDialog').hide();" 
                                             styleClass="save-button" />
                        </div>
                    </div>
                </div>
            </h:form>
            <!-- geri git tuşu -->
            <div class="form-field" style="position: absolute; top: 20px; left: 20px;">
                <h:button value="&#8592;" style="font-size: 20px;" outcome="index.xhtml" styleClass="back-button">
                </h:button>
            </div>

        </p:dialog>
        <h:form>
            <p:confirmDialog widgetVar="sessionTimeoutDialog" header="Oturum Zaman Aşımı Uyarısı"
                             message="Oturumunuz 1 dakika içinde sona erecek. Oturumu yenilemek ister misiniz?" severity="warn">
                <p:commandButton value="Evet" oncomplete="resetTimer()" />
                <p:commandButton value="Hayır" onclick="PF('sessionTimeoutDialog').hide(); window.location.href = 'logout.xhtml';" />
            </p:confirmDialog>
        </h:form>


        <!-- Logout için form (Gizli bir form olarak yerleştirilebilir) -->
        <h:form id="logoutForm" style="display:none">
            <h:commandButton id="logoutButton" action="#{loginMB.logout}" style="display:none" />
        </h:form>

        <script>
            // Parola gösterme/gizleme ve şifre işlevlerini yöneten fonksiyonlar
            function togglePasswordVisibility(passwordId) {
                var passwordElement = document.getElementById('password_' + passwordId);
                var isPasswordVisible = passwordElement.classList.contains('visible-password');
                console.log("Parola kimliği için görünürlüğü değiştirme:", passwordId);

                if (isPasswordVisible) {
                    console.log("Şifre şu anda görünür durumda. GİZLE.");
                    passwordElement.classList.remove('visible-password');
                    passwordElement.textContent = '********';
                } else {
                    console.log("Şifre şu anda gizli. GÖSTER!.");
                    passwordElement.classList.add('visible-password');
                    passwordElement.textContent = passwordElement.dataset.password;
                    hidePasswordAutomatically(3);
                }
            }

            // Sayfa değişikliği algılandığında, otomatik olarak gizlenen şifreyi durdur
            window.addEventListener('beforeunload', function () {
                clearTimeout(timeoutHidePassword);
            });

            // Şifrenin otomatik olarak gizlenmesini sağlayan zamanlayıcı
            var timeoutHidePassword;
            function hidePasswordAutomatically(timeout) {
                console.log("Otomatik şifre gizleme zamanlaması", timeout, "saniye.");
                timeoutHidePassword = setTimeout(() => {
                    var passwordFields = document.querySelectorAll('.password-visible');
                    passwordFields.forEach(field => {
                        field.textContent = '********';
                        field.classList.remove('password-visible');
                        field.classList.add('password-hidden');
                    });
                    document.querySelectorAll('.pi-eye').forEach(icon => {
                        icon.classList.remove('pi-eye');
                        icon.classList.add('pi-eye-slash');
                    });
                }, timeout * 1000);
            }

            // Oturum zaman aşımı uyarıları ve yönlendirmeler
            var timeoutWarning = 3600000; // 1 saat sonra uyarı
            var timeoutLogout = 3660000;  // 1 saat 1 dakika sonra logout

            window.onload = function () {
                resetTimer();
                // Önceki oturum zaman aşımı logunu engelle
                clearTimeout(logSessionTimeout);
                // Önceki oturum zaman aşımı uyarılarını ve oturum sonlandırma işlemlerini durdur
                clearTimeout(timeoutWarning);
                clearTimeout(timeoutLogout);
                document.getElementById('username').value = '';
                document.getElementById('password').value = '';
            };

            document.addEventListener("DOMContentLoaded", function () {
                resetTimer();
                // Önceki oturum zaman aşımı logunu engelle
                clearTimeout(logSessionTimeout);
                // Önceki oturum zaman aşımı uyarılarını ve oturum sonlandırma işlemlerini durdur
                clearTimeout(timeoutWarning);
                clearTimeout(timeoutLogout);
            });

            // Sayfa değişikliği algılandığında, otomatik olarak gizlenen şifreyi durdur
            window.onbeforeunload = function () {
                clearTimeout(timeoutWarning);
                clearTimeout(timeoutLogout);
            };

            // Oturum zaman aşımı uyarıları ve oturumu sonlandırma işlemlerini durdur
            function handleSessionTimeout() {
                timeoutWarning = setTimeout(() => {
                    alert('Oturumunuz 1 saat içinde sona erecek. Oturumu yenilemek için herhangi bir sayfayı yenileyin.');
                }, 3600000); // 1 saat sonra uyarı
                timeoutLogout = setTimeout(() => {
                    window.location.href = "login.xhtml"; // Oturum sonlandırma ve logout sayfasına yönlendirme
                }, 3660000); // 1 saat 1 dakika sonra logout
            }

            // Kullanıcı etkinliğini izleyerek oturum zamanlayıcılarını sıfırlama
            function resetTimer() {
                clearTimeout(timeoutWarning);
                clearTimeout(timeoutLogout);
                handleSessionTimeout(); // Zamanlayıcıları yeniden başlat
            }

            document.querySelectorAll('.auto-expand').forEach(field => {
                field.addEventListener('input', function () {
                    this.style.height = 'auto';
                    this.style.height = this.scrollHeight + 'px';
                });
                autoExpandField(field); // Başlangıçta da boyutlandır
            });
        </script>
    </h:body>
</html>